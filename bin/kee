#!/usr/bin/env python3
"""
kee

Create ASCII (ass-kee) art as a pdf and print it!

Copyright (C) 2022 Luiz Eduardo Amaral <luizamaral306@gmail.com>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import argparse
import re
import sys
import tempfile

import kee


def main(
    image,
    width,
    palette,
    invert_palette,
    font_size,
    black_threshold,
    white_threshold,
    letter_spacing,
    line_height,
    foreground_color,
    background_color,
    highlight_color,
    highlight_text,
    colors,
    color_palette,
    color_offset,
    write_header,
    paper_size,
    landscape,
    translate_x,
    translate_y,
    output,
):
    if foreground_color is not None:
        foreground_color = kee.hex2rgb(foreground_color)
    if background_color is not None:
        background_color = kee.hex2rgb(background_color)

    k = kee.Kee(
        image,
        width,
        default_color=foreground_color,
        default_background_color=background_color,
        black_threshold=black_threshold,
        white_threshold=white_threshold,
        letter_spacing=letter_spacing,
        line_height=line_height,
    )
    text = k.character_palette_text(
        character_palette=palette,
        invert_palette=invert_palette,
    )

    layers = kee.StackedLayers()

    if len(highlight_text) > 0:
        highlight_layers, text = k.text_to_highlight_layers(
            text, highlight_text, [kee.hex2rgb(col) for col in highlight_color]
        )
        layers += highlight_layers

    layers += k.text_to_layers(
        text,
        color=foreground_color,
        background_color=background_color,
        color_palette=color_palette if colors else None,
        color_offset=color_offset if colors else None,
    )

    if output is None:
        print(layers)
        return

    if write_header:
        command_str = " ".join(
            [
                a if a.startswith("-") else '"' + re.sub(r'([$"])', r"\\\1", a) + '"'
                for a in sys.argv[1:]
            ]
        )
        header_text = (
            f"kee v{kee.__version__} https://github.com/luxedo/kee\nkee {command_str}"
        )
        k.add_header(header_text)

    return k.to_image(
        layers,
        output,
        shape=kee.PAPER_SIZES[paper_size],
        font_size=font_size,
        translate_x=translate_x,
        translate_y=translate_y,
    )


def hex_string(value):
    if not re.match("^#([0-9a-fA-F]{3}){1,2}", value):
        raise argparse.ArgumentTypeError("Not an hex string")
    return value


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Creates a pdf document with given picture as ASCII art."
    )
    parser.add_argument("image", help="source image file")
    parser.add_argument(
        "-w", "--width", type=int, default=480, help="Number of characters per row"
    )
    parser.add_argument(
        "-p",
        "--palette",
        type=str,
        default=kee.Kee.default_character_palette,
        help="Character palette",
    )
    parser.add_argument(
        "-i",
        "--invert-palette",
        action="store_true",
        help="Inverts the color palette",
    )
    parser.add_argument(
        "-f",
        "--font-size",
        type=float,
        default=12,
        help="Font size",
    )
    parser.add_argument(
        "-K",
        "--black-threshold",
        type=float,
        default=0,
        help="Image threshold for black",
    )
    parser.add_argument(
        "-W",
        "--white-threshold",
        type=float,
        default=1,
        help="Image threshold for white",
    )
    parser.add_argument(
        "-S",
        "--letter-spacing",
        type=float,
        default=0.0,
        help="Letter separation. Both in rows and columns",
    )
    parser.add_argument(
        "-L",
        "--line-height",
        type=float,
        default=1.15,
        help="Letter separation. Both in rows and columns",
    )
    parser.add_argument(
        "-F",
        "--foreground-color",
        type=hex_string,
        default="#111",
        help="Foreground color",
    )
    parser.add_argument(
        "-B",
        "--background-color",
        type=hex_string,
        default="#fff",
        help="Background color",
    )
    parser.add_argument(
        "-G",
        "--highlight-color",
        type=hex_string,
        default=["#e11"],
        nargs="+",
        help="Highlight colors",
    )
    parser.add_argument(
        "-t",
        "--highlight-text",
        type=str,
        default=[],
        nargs="*",
        help="Highlight words",
    )
    parser.add_argument(
        "-c",
        "--color",
        action="store_true",
        help="Colored output",
    )
    parser.add_argument(
        "--color-palette",
        type=int,
        default=5,
        help="Number of colors for --colors",
    )
    parser.add_argument(
        "--color-offset",
        type=float,
        nargs=3,
        default=[0, 0, 0],
        help="Offsete for colors in HSV",
    )
    parser.add_argument(
        "-H",
        "--write-header",
        action="store_true",
        help="Writes header in the document",
    )
    parser.add_argument(
        "-P",
        "--paper-size",
        choices=kee.PAPER_SIZES.keys(),
        default="A3",
        help="Print paper size",
    )
    parser.add_argument(
        "-l",
        "--landscape",
        action="store_true",
        help="Creates document in landscape orientation",
    )
    parser.add_argument(
        "--translate-x",
        type=float,
        default=0,
        help="Translates the image horizontally in em",
    )
    parser.add_argument(
        "--translate-y",
        type=float,
        default=0,
        help="Translates the image vertically in em",
    )
    parser.add_argument(
        "-o",
        "--output",
        default=None,  # Same name as image
        type=str,
        help="Output image filename. Outputs to stdout if empty",
    )
    parser.add_argument(
        "-v", "--version", action="version", version=f"%(prog)s {kee.__version__}"
    )
    parser.add_argument("-V", "--verbose", action="store_true")
    args = parser.parse_args()

    main(
        args.image,
        args.width,
        args.palette,
        args.invert_palette,
        args.font_size,
        args.black_threshold,
        args.white_threshold,
        args.letter_spacing,
        args.line_height,
        args.foreground_color,
        args.background_color,
        args.highlight_color,
        args.highlight_text,
        args.color,
        args.color_palette,
        args.color_offset,
        args.write_header,
        args.paper_size,
        args.landscape,
        args.translate_x,
        args.translate_y,
        args.output,
    )
