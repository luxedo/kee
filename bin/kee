#!/usr/bin/env python3
"""
kee

Create ASCII (ass-kee) art as a pdf and print it!

Copyright (C) 2022 Luiz Eduardo Amaral <luizamaral306@gmail.com>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""
import argparse
import math
import re
import sys
import tempfile

import kee


def main(args):
    if args.color is not None:
        args.color = kee.hex2rgb(args.color)
    if args.background_color is not None:
        args.background_color = kee.hex2rgb(args.background_color)

    k = kee.Kee(
        args.image,
        args.width,
        default_color=args.color,
        default_background_color=args.background_color,
        black_threshold=args.black_threshold,
        white_threshold=args.white_threshold,
        letter_spacing=args.letter_spacing,
        line_height=args.line_height,
    )

    if args.mode == "char-palette":
        text = k.character_palette_text(
            character_palette=args.palette,
            invert_palette=args.invert_palette,
        )
    elif args.mode == "text":
        with open(args.text, "r") as fp:
            text = fp.read()
        text = re.sub("\\n+", "\n", text)
        text = re.sub("[ ]+", " ", text)
        text = text.replace("\n", "Â¶ ")
        text = "\n".join(
            text[i * k.cols : (i + 1) * k.cols] for i in range(math.ceil(k.rows))
        )
        text = text + " " * ((len(text) % k.cols) - k.cols)

    layers = kee.StackedLayers()

    if len(args.highlight_text) > 0:
        highlight_layers, text = k.text_to_highlight_layers(
            text,
            args.highlight_text,
            [kee.hex2rgb(col) for col in args.highlight_color],
        )
        layers += highlight_layers

    layers += k.text_to_layers(
        text,
        color=args.color,
        background_color=args.background_color,
        colors_palette=args.colors_palette,
        hsv_offset=args.hsv_offset,
    )

    if args.output is None:
        print(layers)
        return

    if args.write_header:
        command_str = " ".join(
            [
                a if a.startswith("-") else '"' + re.sub(r'([$"])', r"\\\1", a) + '"'
                for a in sys.argv[1:]
            ]
        )
        header_text = (
            f"kee v{kee.__version__} https://github.com/luxedo/kee\nkee {command_str}"
        )
        k.add_header(header_text)

    return k.to_image(
        layers,
        args.output,
        shape=(
            kee.Kee.portrait_sizes[args.paper_size]
            if not args.landscape
            else kee.Kee.landscape_sizes[args.paper_size]
        ),
        font_size=args.font_size,
        font_family=args.font_family,
        translate_x=args.translate_x,
        translate_y=args.translate_y,
    )


def hex_string(value):
    if not re.match("^#([0-9a-fA-F]{3}){1,2}", value):
        raise argparse.ArgumentTypeError("Not an hex string")
    return value


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Creates ASCII art for the terminal and for printing."
    )
    subparsers = parser.add_subparsers(
        help="Art mode. Check https://github.com/luxedo/kee/modes.md for examples.",
        dest="mode",
    )
    parser_cp = subparsers.add_parser(
        "char-palette",
    )
    parser_t = subparsers.add_parser(
        "text",
    )

    parser_cp.add_argument(
        "-p",
        "--palette",
        type=str,
        default=kee.Kee.default_character_palette,
        help="Character palette",
    )
    parser_cp.add_argument(
        "-i",
        "--invert-palette",
        action="store_true",
        help="Inverts the color palette",
    )
    parser_t.add_argument(
        "-r", "--repeat", action="store_true", help="Repeats text to fill image"
    )

    for subparser in [parser_cp, parser_t]:  #  Common arguments
        subparser.add_argument("image", help="source image file")
        subparser.add_argument(
            "-w", "--width", type=int, default=360, help="Number of characters per row"
        )
        subparser.add_argument(
            "-f",
            "--font-size",
            type=float,
            default=12,
            help="Font size",
        )
        subparser.add_argument(
            "-F",
            "--font-family",
            type=str,
            default="Courier",
            help="Font family",
        )
        subparser.add_argument(
            "-K",
            "--black-threshold",
            type=float,
            default=0,
            help="Image threshold for black",
        )
        subparser.add_argument(
            "-W",
            "--white-threshold",
            type=float,
            default=1,
            help="Image threshold for white",
        )
        subparser.add_argument(
            "-S",
            "--letter-spacing",
            type=float,
            default=0.0,
            help="Letter separation. Both in rows and columns",
        )
        subparser.add_argument(
            "-L",
            "--line-height",
            type=float,
            default=1.15,
            help="Letter separation. Both in rows and columns",
        )
        subparser.add_argument(
            "-C",
            "--color",
            type=hex_string,
            default="#111",
            help="Foreground color",
        )
        subparser.add_argument(
            "-B",
            "--background-color",
            type=hex_string,
            default="#fff",
            help="Background color",
        )
        subparser.add_argument(
            "-G",
            "--highlight-color",
            type=hex_string,
            default=["#e11"],
            nargs="+",
            help="Highlight colors",
        )
        subparser.add_argument(
            "-T",
            "--highlight-text",
            type=str,
            default=[],
            nargs="*",
            help="Highlight words",
        )
        subparser.add_argument(
            "-c",
            "--colors",
            action="store_true",
            help="Colored output",
        )

        subparser.add_argument(
            "--colors-palette",
            type=int,
            default=5,
            help="Number of colors for --colors",
        )
        subparser.add_argument(
            "--hsv-offset",
            type=float,
            nargs=3,
            default=(0, 0, 0),
            help="Offsete for colors in HSV",
        )
        subparser.add_argument(
            "-H",
            "--write-header",
            action="store_true",
            help="Writes header in the document",
        )
        subparser.add_argument(
            "-P",
            "--paper-size",
            choices=kee.Kee.portrait_sizes.keys(),
            default="A3",
            help="Print paper size",
        )
        subparser.add_argument(
            "-l",
            "--landscape",
            action="store_true",
            help="Creates document in landscape orientation",
        )
        subparser.add_argument(
            "--translate-x",
            type=float,
            default=0,
            help="Translates the image horizontally in em",
        )
        subparser.add_argument(
            "--translate-y",
            type=float,
            default=0,
            help="Translates the image vertically in em",
        )
        subparser.add_argument(
            "-o",
            "--output",
            default=None,  # Same name as image
            type=str,
            help="Output image filename. Outputs to stdout if empty",
        )

    parser_t.add_argument("text", help="source text file")
    parser.add_argument(
        "-v", "--version", action="version", version=f"%(prog)s {kee.__version__}"
    )
    parser.add_argument("-V", "--verbose", action="store_true")
    args = parser.parse_args()

    main(args)
